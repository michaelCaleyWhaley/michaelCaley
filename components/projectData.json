[
  {
    "imgSrc": "/static/nextjs-logo.png",
    "imgAlt": "Next JS",
    "title": "NextJs website",
    "desc": "Full build website utilising Node, React and NextJs",
    "sidebarData": {
      "title": "NEXT.js",
      "paraMain": "A full website build using the NEXT.js framework. This technology allows for fast and straight forward development using Node and React. NEXT handles alot out of the box and provides a great foundation to build from.",
      "imgSrc": "/static/nextjs-logo.png",
      "imgAlt": "Next JS",
      "paraAlt": "A useful feature you may notice in this build is the usage of customEvents with ProjectTile components. The slide out sidebar listens for an event which has all the data it needs to be populated with attached. This allows the sidebar component to be completely decoupled from the ProjectTiles",
      "href": "https://github.com/michaelCaleyWhaley/nextJsPortfolio",
      "hrefTitle": "NEXT.js project link",
      "hrefText": " Project link"
    }
  },
  {
    "imgSrc": "/static/flashlight_night.jpg",
    "imgAlt": "Torch light animation",
    "title": "Torch light",
    "desc": "Code snippet show casing a torch effect users can interact with",
    "sidebarData": {
      "title": "Torch light",
      "paraMain": "This code snippet was inspired from a similar effect I saw on Codepen which I felt had been down in an overly complicated way (Unfortunately, at the time of writing the original inspiration is lost to me).",
      "imgSrc": "/static/flashlight_night.jpg",
      "imgAlt": "Night time torch light",
      "paraAlt": "In this version a very simple setup is required. A container with a background image, and a child which is position absolute, and twice the width and height of the parent. The child has a radial-gradient background which allows it to be completely dark with the exception of a circle at the centre. On mouse over you simply move the centre of the child to the mouse coordinates.",
      "href": "https://codepen.io/mikeCaley/pen/xxKpNeQ",
      "hrefTitle": "Torch light codepen link",
      "hrefText": " Project link"
    }
  },
  {
    "imgSrc": "/static/spaceman.jpg",
    "imgAlt": "astronaut waving",
    "title": "Todo app",
    "desc": "App built using Node and MongoDB",
    "sidebarData": {
      "title": "Todo App",
      "paraMain": "My first complete project using Node. The app provides a number of endpoints via Express.js which allow a user to interact with a MongoDB database. An example would be the /todos endpoint which allows you to add a todo to the database using a shape specified by the todo model. To simplify the interactions between Express and Mongo I used a library called Mongoose, which provides a nuber of easy to use methods for Mongo database interaction.",
      "imgSrc": "/static/spaceman.jpg",
      "imgAlt": "astronaut waving",
      "paraAlt": "",
      "href": "https://github.com/michaelCaleyWhaley/monogodb-todo",
      "hrefTitle": "Todo app repository",
      "hrefText": " Project link"
    }
  },
  {
    "imgSrc": "/static/expenses.jpg",
    "imgAlt": "financial ledger",
    "title": "Expensify",
    "desc": "Simple expenses app built using React",
    "sidebarData": {
      "title": "Expensify",
      "paraMain": "This app is a front-end only expense management system. I built this as an exercise in React, Redux and React Router.",
      "imgSrc": "/static/expenses.jpg",
      "imgAlt": "financial ledger",
      "paraAlt": "Normal React applications store state for each component in their own compartment. This means if you want one component to talk to another you have to pass data around as Props. Sometimes this is an adequate solution, however another option is to use something like Redux which provides a shared state which any component can be connected to. ",
      "href": "https://github.com/michaelCaleyWhaley/expensesApp__React",
      "hrefTitle": "Expenses app repository",
      "hrefText": " Project link"
    }
  },
  {
    "imgSrc": "/static/squares.jpg",
    "imgAlt": "square pattern",
    "title": "3D CUBES",
    "desc": "Responsive 3D cubes using CSS and JS",
    "sidebarData": {
      "title": "3D CUBES",
      "paraMain": "Whilst investigating the usage of canvas I wondered how difficult it would be to create 3D objects using purely elements in the DOM. A quick search revealed nothing quite like what I had in mind, and nothing responsive. Initial attempts were pure CSS, however I realised that we had no access to responsive values on the Z plane in CSS so had to bring JavaScript in to do some of the computational lifting.",
      "imgSrc": "/static/squares.jpg",
      "imgAlt": "square patten",
      "paraAlt": "Some time has passed since I created this project so when I look back now, I see areas requiring improvement, such as the structure of the JS. However, I believe the look and functional of the cubes is good and is still of interest. ",
      "href": "https://codepen.io/mikeCaley/full/evaEyr",
      "hrefTitle": "codepen 3D cube link",
      "hrefText": " Project link"
    }
  }
]
